name: Sync main → develop

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write # needed to push the sync branch
  pull-requests: write # needed to open/edit PRs

concurrency:
  group: sync-main-to-develop
  cancel-in-progress: true

jobs:
  open-sync-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Fetch branches
        run: |
          git fetch origin +refs/heads/main:refs/remotes/origin/main
          git fetch origin +refs/heads/develop:refs/remotes/origin/develop || echo "No develop branch yet"

      - name: Create/update sync branch at main tip
        run: |
          git checkout origin/main
          git push --force --set-upstream origin sync/main-to-develop

      - name: Open PR (or reuse existing)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # If an open PR from sync/main-to-develop → develop already exists, do nothing.
          existing_count=$(gh pr list --base develop --head sync/main-to-develop --state open --json number --jq 'length' || echo 0)
          if [ "$existing_count" -gt 0 ]; then
            echo "A sync PR is already open; branch was force-pushed with latest main."
            exit 0
          fi

          gh pr create \
            --base develop \
            --head sync/main-to-develop \
            --title "Sync main → develop" \
            --body "Automated PR to merge changes from \`main\` into \`develop\` after a push to \`main\`."

          # Optional niceties:
          # gh pr edit --add-label "sync"
          # gh pr edit --add-reviewer your-github-handle
          # If 'Require linear history' on develop, consider enabling auto-merge with rebase:
          # gh pr merge --auto --rebase

      - name: Enable auto-merge if conflict-free
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR: ${{ steps.openpr.outputs.pr_number }}
        run: |
          # Poll until GitHub computes mergeability (can be "UNKNOWN" briefly)
          tries=0
          state="UNKNOWN"
          while [ $tries -lt 10 ]; do
            state=$(gh pr view "$PR" --json mergeable --jq '.mergeable' || echo "UNKNOWN")
            # Possible values: MERGEABLE, CONFLICTING, UNKNOWN
            [ "$state" != "UNKNOWN" ] && break
            sleep 3
            tries=$((tries+1))
          done

          echo "Mergeable state: $state"
          if [ "$state" = "CONFLICTING" ]; then
            echo "PR has conflicts; leaving it open for manual resolution."
            exit 0
          fi

          # Try to enable auto-merge with rebase. This will wait until checks/approvals are satisfied.
          # Requires repo setting "Allow auto-merge".
          if gh pr merge "$PR" --auto --rebase; then
            echo "Auto-merge enabled (rebase)."
            exit 0
          fi

          # Fallback: if auto-merge isn't allowed but PR is clean & meets requirements, merge immediately.
          # We'll check a richer state to avoid merging when still blocked by protections.
          mergeState=$(gh pr view "$PR" --json mergeStateStatus --jq '.mergeStateStatus' || echo "")
          echo "mergeStateStatus: $mergeState"
          if [ "$mergeState" = "CLEAN" ]; then
            gh pr merge "$PR" --rebase --delete-branch
            echo "Merged immediately (rebase)."
          else
            echo "PR not ready for immediate merge; leaving it open."
          fi
